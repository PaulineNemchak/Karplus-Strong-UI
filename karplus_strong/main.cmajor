graph Main [[ main ]]
{
    input event std::midi::Message midiIn;
    output stream float out;

    input event float impulseLength [[ name: "length", min: 0.1f, max: 5.0f, init: 1.0f]];
    input event float feedbackIn [[ name: "feedback", min: 0.1f, max: 0.99f, init: 0.9f]];

    node voices = Voice[8];
    node voiceAllocator = std::voices::VoiceAllocator(8);


    connection
    {
        midiIn -> std::midi::MPEConverter -> voiceAllocator;


        voiceAllocator.voiceEventOut -> voices.notesIn;
        feedbackIn ->voices.feedback;

        voices -> out;
    }
}

graph Voice 
{
    input event (std::notes::NoteOn, std::notes::NoteOff) notesIn;
    output stream float out;

    input event float impulseLength [[ name: "length", min: 0.1f, max: 5.0f, init: 1.0f]];
    input event float feedback;

    node gate = MidiGate;
    node noiseSource = std::noise::White;
    node delay = Delay;
    node filter = std::filters (float)::tpt::onepole::Processor (0);
    node lowpass = std::filters(float, float32, 64)::butterworth (2)::Processor(0);
    node gain = std::levels::ConstantGain (float, 0.1f);
    node feedback = std::levels::DynamicGain(float);

    connection
    {
        notesIn -> NoteSelector -> delay.delayLength, gate.gateLength;
        notesIn -> gate.eventIn;

        feedback -> feedback.gain;

        noiseSource.out * gate.out -> delay.in;
        delay.out -> filter.in;
        filter.out -> gain -> out;
        delay.out -> feedback -> [1] -> delay.in;

        noiseSource.out * gate.out -> lowpass.in;
        lowpass.out -> gain -> out;
    }
}

processor MidiGate
{
    input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
    input event float gateLength;
    output stream float out;

    event eventIn (std::notes::NoteOn e)    { activeNotes++; }
    event gateLength (float gateLength)     {gateDurationInSamples = gateLength;}

    int activeNotes = 0;
    // int gateDurationInSamples = processor.frequency / 1000; // Assuming 44.1 kHz sample rate for 1ms
    float gateDurationInSamples;

    void main()
    {
        loop
        {
            if (activeNotes > 0)
            {
                out <- 1.0f;
                gateDurationInSamples--;
                if (gateDurationInSamples <= 0) { activeNotes--; } // Close the gate after 1ms
            }
            advance();
        }
    }
}

processor NoteSelector ()
{
    input event (std::notes::NoteOn, std::notes::PitchBend) eventIn;
    output event float noteFrequency;

    float notePitch, pitchBend;

    event eventIn (std::notes::NoteOn noteOn)
    {
        notePitch = noteOn.pitch;
        noteFrequency <- std::notes::noteToFrequency (notePitch + pitchBend);
    }

    event eventIn (std::notes::PitchBend e)
    {
        pitchBend = e.bendSemitones;
        noteFrequency <- std::notes::noteToFrequency (notePitch + pitchBend);
    }
}

processor Delay
{
    input  stream float in;
    output stream float out;

    input event float delayLength;

    event delayLength (float delaySamples)  { readPos = wrap<maxDelayLength> (writePos - int(processor.frequency/delaySamples)); }

    let maxDelayLength = 10000;

    float[maxDelayLength] buffer;
    wrap<maxDelayLength> readPos, writePos;

    void main()
    {
        loop
        {
            buffer[writePos] = in + 0.9f * buffer[readPos];
            out <- buffer[readPos];

            ++readPos;
            ++writePos;

            advance();
        }
    }
}